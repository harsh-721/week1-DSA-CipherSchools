#include <iostream>
#include <vector>
using namespace std;

pair<int, int> findFirstAndLast(const vector<int>& vec, int target) {
    int first = -1;
    int last = -1;

    int low = 0;
    int high = vec.size() - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (vec[mid] == target) {
            first = mid;
            high = mid - 1;
        } else if (vec[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    low = 0;
    high = vec.size() - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (vec[mid] == target) {
            last = mid;
            low = mid + 1;
        } else if (vec[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return make_pair(first, last);
}

int main() {
    vector<int> sortedVector = {1, 2, 3, 3, 3, 4, 5, 5, 6, 6, 6};
    int target = 3;
    pair<int, int> result = findFirstAndLast(sortedVector, target);
    cout << "First occurrence: " << result.first << endl;
    cout << "Last occurrence: " << result.second << endl;
    return 0;
}

Q.1: Sorting Problem

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int s = 0;
        int mid = 0;
        int e = nums.size()-1;
        while(mid<=e)
        {
            if(nums[mid] == 2)
            {
                swap(nums[mid], nums[e--]);
            }
            else if(nums[mid] == 1)
            {
                mid++;
            }
            else 
            {
                swap(nums[s++], nums[mid++]);
            }
        }
    }
};


Q.2: Set matrix zeros

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        bool firstCol = false;
        for(int i = 0; i < matrix.size(); i++){
            if(matrix[i][0]==0)firstCol = true;
            for(int j = 1; j < matrix[0].size(); j++){
                if(matrix[i][j]==0){
                    matrix[0][j]=0;
                    matrix[i][0]=0;
                }
            }
        }
        for(int i = 1; i < matrix.size(); i++){
            for(int j = 1; j < matrix[0].size(); j++){
                if(matrix[0][j]==0 || matrix[i][0]==0)matrix[i][j]=0;
            }
        }

        if (matrix[0][0] == 0) {
            for (int j = 0; j < matrix[0].size(); j++)matrix[0][j] = 0;
        }

        if (firstCol){
            for (int i = 0; i < matrix.size(); i++)matrix[i][0] = 0;
        }

    }
};

Q.3: search in 2D matrix

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size();
        int col = matrix[0].size();
        
        int start = 0;
        int end = row * col - 1;
        
        int mid = start + (end-start)/2;
        while(start <= end)
        {
            int element = matrix[mid/col][mid%col];
            if(element == target)
            {
                return true;
            }
            else if(element > target)
            {
                end = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
            mid = start + (end-start)/2;
        }
        return false;
    }
};

Q.4: search in sorted rotated matrix

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int s=0,e=nums.size()-1;
        while(s<=e){
            int mid=s +(e-s)/2;
            if(nums[mid]==target) return(mid);
            else if(nums[s] <= nums[mid]){
                if(target>=nums[s] && target<=nums[mid]){
                    e=mid-1;
                }
                else{
                    s=mid+1;
                }
            }
            else{
                if(target>=nums[mid] && target<=nums[e]){
                    s=mid+1;
                }
                else{
                    e=mid-1;
                }
            }
            
        }
        return(-1);

    }
};
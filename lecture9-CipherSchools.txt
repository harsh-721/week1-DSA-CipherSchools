Q.6: Unique path
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid[0][0] == 1)
        {
            return 0;
        }
        int row = obstacleGrid.size();
        int col = obstacleGrid[0].size();
        int dp[row][col];
        for(int i=0; i<row; i++)
        {
            for(int j=0; j<col; j++)
            {
                if(i==0 && j==0)
                {
                    dp[i][j] = 1;
                }
                else if(i==0)
                {
                    if(obstacleGrid[i][j-1]==1 || obstacleGrid[i][j] == 1||dp[i][j-1] == 0)
                    {
                        dp[i][j] = 0;
                    }
                    else
                    {
                        dp[i][j] = 1;
                    }
                }
                else if(j==0)
                {
                    if(obstacleGrid[i-1][j] == 1 || obstacleGrid[i][j] ==1||dp[i-1][j]==0)
                    {
                        dp[i][j] = 0;
                    }
                    else
                    {
                        dp[i][j] = 1;
                    }
                }
                else
                {
                    if(obstacleGrid[i][j] != 1)
                    {
                        dp[i][j] = dp[i-1][j] + dp[i][j-1];
                    }
                    else
                    {
                        dp[i][j] = 0;
                    }
                    
                }
            }
        }
        
        return dp[row-1][col-1];
    }
};

Q.7: NQueen 

#include <bits/stdc++.h>
#define N 4
using namespace std;
void printSolution(int board[N][N])
{
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++)
		if(board[i][j])
			cout << "Q ";
		else cout<<". ";
		printf("\n");
	}
}
bool isSafe(int board[N][N], int row, int col)
{
	int i, j;
	for (i = 0; i < col; i++)
		if (board[row][i])
			return false;
	for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
		if (board[i][j])
			return false;
	for (i = row, j = col; j >= 0 && i < N; i++, j--)
		if (board[i][j])
			return false;

	return true;
}
bool solveNQUtil(int board[N][N], int col)
{
	if (col >= N)
		return true;
	for (int i = 0; i < N; i++) {
		if (isSafe(board, i, col)) {
			board[i][col] = 1;
			if (solveNQUtil(board, col + 1))
				return true;
			board[i][col] = 0; // BACKTRACK
		}
	}
	return false;
}
bool solveNQ()
{
	int board[N][N] = { { 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 } };

	if (solveNQUtil(board, 0) == false) {
		cout << "Solution does not exist";
		return false;
	}

	printSolution(board);
	return true;
}
int main()
{
	solveNQ();
	return 0;
}

